[{"content":"MinGW MinGW: A native Windows port of the GNU Compiler Collection (GCC), with freely distributable import libraries and header files for building native Windows applications; includes extensions to the MSVC runtime to support C99 functionality. All of MinGW\u0026rsquo;s software will execute on the 64bit Windows platforms.\n下载 MinGW - Minimalist GNU for Windows 直接下载\n安装 安装时选择好安装位置(不能有中文或空格)，其他默认即可。 安装完成后打开MinGW，勾选mingw32-base，mingw32-gcc-g++，分别是C/C++编译器。 点击Installation -\u0026gt; Apply Changes，在弹出窗口中点击Apply。 将MinGW添加到系统环境变量 在终端中输入gcc -v查看是否安装成功。 进入MinGW安装位置C:\\MinGW\\bin，将mingw32-make.exe复制一个出来改成make.exe方便使用。 到这里你可以使用gcc -o main main.c来编译C程序。\nCMake 下载 CMake下载地址，选择正确的平台，一般是x64。 直接下载 安装 双击运行下载的.msi文件。 选择第二个将CMake添加到系统环境变量，桌面快捷方式根据个人习惯选择。 选择安装位置。 在终端中输入cmake --version查看是否安装成功。 系统环境变量修改后要重启终端才能生效\n使用CMake编译 创建一个test文件夹。 1 mkdir test\u0026amp;\u0026amp;cd test 在文件夹中新建main.c和CMakeLists.txt文件，并在其中分别写入以下内容。 1 2 3 4 5 6 7 // main.c #include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello World!\\n\u0026#34;); return 0; } 1 2 3 4 5 6 7 8 9 10 # CMakeLists.txt cmake_minimum_required(VERSION 3.27) project(test) # 这里的\u0026#34;C:/MinGW/bin\u0026#34;路径是你MinGW的路径 set(CMAKE_CXX_COMPILER \u0026#34;C:/MinGW/bin/g++.exe\u0026#34;) set(CMAKE_C_COMPILER \u0026#34;C:/MinGW/bin/gcc.exe\u0026#34;) add_executable(test main.c) 在test文件夹下创建build文件夹，并用CMake编译。 1 2 3 mkdir build\u0026amp;\u0026amp;cd build cmake .. -G \u0026#34;MinGW Makefiles\u0026#34; make 错误 The C compiler is not able to compile a simple test program. 运行：\n1 cmake .. -G \u0026#34;MinGW Makefiles\u0026#34; 输出：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 PS D:\\Trrrrw\\文档\\C\\test\\build\u0026gt; cmake .. -G \u0026#34;MinGW Makefiles\u0026#34; -- The C compiler identification is GNU 6.3.0 -- The CXX compiler identification is GNU 6.3.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - failed -- Check for working C compiler: D:/MinGW/bin/gcc.exe -- Check for working C compiler: D:/MinGW/bin/gcc.exe - broken CMake Error at D:/Trrrrw/应用/命令行工具/cmake/share/cmake-3.27/Modules/CMakeTestCCompiler.cmake:67 (message): The C compiler \u0026#34;D:/MinGW/bin/gcc.exe\u0026#34; is not able to compile a simple test program. It fails with the following output: Change Dir: \u0026#39;D:/Trrrrw/文档/C/test/build/CMakeFiles/CMakeScratch/TryCompile-qihtzh\u0026#39; Run Build Command(s): D:/Trrrrw/应用/命令行工具/cmake/bin/cmake.exe -E env VERBOSE=1 D:/MinGW/bin/mingw32-make.exe -f Makefile cmTC_22fc3/fast D:/MinGW/bin/mingw32-make.exe -f CMakeFiles\\cmTC_22fc3.dir\\build.make CMakeFiles/cmTC_22fc3.dir/build mingw32-make.exe[1]: Entering directory \u0026#39;D:/Trrrrw/文档/C/test/build/CMakeFiles/CMakeScratch/TryCompile-qihtzh\u0026#39; 系统找不到指定的路径。 CMakeFiles\\cmTC_22fc3.dir\\build.make:76: recipe for target \u0026#39;CMakeFiles/cmTC_22fc3.dir/testCCompiler.c.obj\u0026#39; failed mingw32-make.exe[1]: *** [CMakeFiles/cmTC_22fc3.dir/testCCompiler.c.obj] Error 1 mingw32-make.exe[1]: Leaving directory \u0026#39;D:/Trrrrw/文档/C/test/build/CMakeFiles/CMakeScratch/TryCompile-qihtzh\u0026#39; Makefile:126: recipe for target \u0026#39;cmTC_22fc3/fast\u0026#39; failed mingw32-make.exe: *** [cmTC_22fc3/fast] Error 2 CMake will not be able to correctly generate this project. Call Stack (most recent call first): CMakeLists.txt:2 (project) -- Configuring incomplete, errors occurred! 解决： 重新安装cmake，使用安装包安装，不要下载压缩包手动添加环境变量\nCMake Error: Target DependInfo.cmake file not found 运行：\n1 make 输出：\n1 2 3 4 5 6 CMake Error: Target DependInfo.cmake file not found make[2]: *** No rule to make target \u0026#39;D:/Trrrrw//C/test/main.c\u0026#39;, needed by \u0026#39;CMakeFiles/test.dir/main.c.obj\u0026#39;. Stop. CMakeFiles/Makefile2:82: recipe for target \u0026#39;CMakeFiles/test.dir/all\u0026#39; failed make[1]: *** [CMakeFiles/test.dir/all] Error 2 Makefile:90: recipe for target \u0026#39;all\u0026#39; failed make: *** [all] Error 2 解决： 文件夹路径不能有中文\n参考文章： MinGW下载和安装教程\n","date":"2023-09-06T21:53:01+08:00","image":"http://localhost:8888/p/windows11%E4%B8%8A%E9%85%8D%E7%BD%AEcc-%E7%8E%AF%E5%A2%83/pixiv-75321273.webp","permalink":"http://localhost:8888/p/windows11%E4%B8%8A%E9%85%8D%E7%BD%AEcc-%E7%8E%AF%E5%A2%83/","title":"Windows11上配置C、C++环境"},{"content":"Java Java 17(1.17及以上版本) https://www.oracle.com/java/technologies/downloads/\nJava 8(1.17以下版本) https://www.java.com/en/download/\n原版 server.jar https://mcversions.net/ 在Stable Releases栏选择需要的版本点击Download，选择Download Server Jar 下载完成后将server.jar文件放在一个文件夹里，右键文件夹空白区域选择在终端中打开(Win10可能需要按住Shift点击右键)。 在终端中运行以下命令：\n1 java -Xms1024M -Xmx1024M -jar server.jar nogui 此时会在文件夹中生成一些文件，并显示提示：\n1 You need to agree to the EULA in order to run the server. Go to eula.txt for more info. 回到文件夹打开eula.txt，将false改为true:\n1 eula=true 此时再回到终端运行这条命令：\n1 java -Xms1024M -Xmx1024M -jar server.jar nogui Windows防火墙可能会有提示，允许即可。 当终端显示下面这行时说明服务器开启成功：\n1 Done (30.927s)! For help, type \u0026#34;help\u0026#34; 在终端中向上找，找到这一行：\n1 Starting Minecraft server on *:25565 其中冒号后面的数字就是你服务器运行的端口(可能会不一样)，此时服务器运行在：\n1 127.0.0.1:25565 现在你本地打开一个Minecraft客户端(不要关闭终端)，就是平时自己玩的那个。进游戏点击多人游戏，选择添加服务器，服务器名随意，服务器地址填上面那个地址。 此时是进不去服务器的，还要打开文件夹中的server.properties文件，修改以下选项：\n1 online-mode=false 这个选项开启之后会验证正版账号，也就是说开启之后只有正版才能进去，所以需要关闭。其他选项的意思参考Minecraft Wiki\n此时在终端输入stop关闭服务器(之后关闭服务器都这么关，这样它会保存你的存档)，再运行启动服务器的命令：\n1 java -Xms1024M -Xmx1024M -jar server.jar nogui 这时客户端就能进服务器了🎉，但此时服务端还只是运行在你自己的电脑上，只有你自己和局域网内的电脑可以连接，接下来就是将本地端口共享给其他人。\nFabric版 从原版安装 到Fabric官网下载最新安装器，点击中间的Download for Windows 双击打开下载的文件，选择服务端，选择正确的游戏版本，加载器版本默认最新即可，安装位置选择原版服务器路径，点击安装，安装完成后可以关闭安装界面。 此时服务器的启动指令变为： 1 java -Xms1024M -Xmx1024M -jar fabric-server-launch.jar nogui 直接安装 下载对应版本的jar文件，放到空文件夹中，并在该路径下在终端中运行：\n1 java -Xmx2G -jar 下载的文件名 nogui 同样需要调整eula.txt和server.properties文件。\nForge版 在官网下载正确版本的jar文件 双击运行，选择Insall server并选择一个空文件夹，点击确定 安装完成后目录： 1 2 3 4 5 folder/ ├── libraries ├── run.bat ├── run.sh ├── user_jvm_args.txt 双击运行run.bat即可，如果想要只弹出命令行窗口的话，可以用记事本打开run.bat，并在java开头那一行最后添加空格nogui 1 java @user_jvm_args.txt @libraries/net/minecraftforge/forge/1.20.1-47.0.1/win_args.txt %* nogui 内网穿透 各种内网穿透工具官网都有详细的使用说明。\nOPENFRP 官网：www.openfrp.net OPENFRP 使用方法：docs.openfrp.net 参考文章： Minecraft Wiki/教程/架设服务器\n","date":"2022-12-13T22:31:54+08:00","image":"https://th.bing.com/th/id/R.70d270fd1f6b92f71d8270139739452f?rik=iZaoU4fUsfs4dw\u0026riu=http%3a%2f%2fgamesminecraft.org%2fgames%2fimg%2fminecraft-inspiration_2676x1505.jpg\u0026ehk=yFg%2fq8SlDV1%2bFASrbAb93%2b%2fIFYJyOe9FhDaTQv5nhBU%3d\u0026risl=\u0026pid=ImgRaw\u0026r=0","permalink":"http://localhost:8888/p/minecraft%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Minecraft搭建本地服务器"},{"content":"依赖 Eigen eigen.tuxfamily.org\n1 2 3 4 5 6 wget https://gitlab.com/libeigen/eigen/-/archive/3.3.4/eigen-3.3.4.zip unzip eigen-3.3.4.zip \u0026amp;\u0026amp; cd eigen-3.3.4 mkdir build \u0026amp;\u0026amp; cd build cmake .. sudo make install sudo cp -r /usr/local/include/eigen3/Eigen /usr/local/include Pangolin Pangolin-Github\n1 2 3 4 5 6 7 8 9 10 git clone https://github.com/stevenlovegrove/Pangolin cd Pangolin/scripts/ rm -rf vcpkg/ git clone https://github.com/microsoft/vcpkg cd .. ./scripts/install_prerequisites.sh --dry-run recommended mkdir build \u0026amp;\u0026amp; cd build cmake .. cmake --build . sudo make install 错误1：Could NOT find OpenGL\n1 sudo apt install libgl1-mesa-dev 错误2：Could not find GLEW\n1 sudo apt install libglew-dev OpenCV opencv.org\n安装依赖 1 2 3 sudo apt install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev sudo apt install libgtk2.0-dev sudo apt install pkg-config 安装OpenCV 1 2 3 4 5 6 7 8 sudo apt update \u0026amp;\u0026amp; sudo apt install g++ unzip wget cmake wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.4.0.zip unzip opencv.zip cd opencv-4.4.0/ mkdir build \u0026amp;\u0026amp; cd build cmake .. cmake --build . sudo make install Boost 1 sudo apt install libboost-all-dev 安装PCL 依赖 将以下内容保存为install_pcl_dependences.sh ，使用在ubuntu 命令行终端输入sudo sh install_pcl_dependences.sh 即可进行安装，在下载安装依赖库过程中会提示是否安装，都输入y。（好像没什么用） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo apt-get update sudo apt-get install git build-essential linux-libc-dev sudo apt-get install cmake cmake-gui sudo apt-get install libusb-1.0-0-dev libusb-dev libudev-dev sudo apt-get install mpi-default-dev openmpi-bin openmpi-common sudo apt-get install libflann1.8 libflann-dev sudo apt-get install libeigen3-dev sudo apt-get install libboost-all-dev sudo apt-get install libvtk5.10-qt4 libvtk5.10 libvtk5-dev sudo apt-get install libqhull* libgtest-dev sudo apt-get install freeglut3-dev pkg-config sudo apt-get install libxmu-dev libxi-dev sudo apt-get install mono-complete sudo apt-get install qt-sdk openjdk-8-jdk openjdk-8-jre 下载源码 1 2 3 4 ## 下载 wget -O pcl.tar.gz https://github.com/PointCloudLibrary/pcl/archive/refs/tags/pcl-1.12.0.tar.gz ## 解压 tar -zxvf pcl.tar.gz 安装 1 2 3 4 5 6 cd pcl-pcl-1.12.0 mkdir release cd release cmake -DCMAKE_BUILD_TYPE=None -DCMAKE_INSTALL_PREFIX=/usr \\ -DBUILD_GPU=ON-DBUILD_apps=ON -DBUILD_examples=ON \\ -DCMAKE_INSTALL_PREFIX=/usr .. make sudo make install 这个是用apt安装，但是好像版本不对\n1 sudo apt install libpcl-dev 安装SLAM 1 2 3 4 git clone -b dense_map https://github.com/electech6/ORB_SLAM3_detailed_comments cd ORB_SLAM3_detailed_comments chmod +x build.sh ./build.sh ## 如果报错可以试试打开这个文件把里面的指令一句一句手动执行，`make -j`换成`make` 报错1：\n1 2 3 fatal error: openssl/md5.h: c #include \u0026lt;openssl/md5.h\u0026gt; ^~~~~~~~~~~~~~~ 1 sudo apt install libssl-dev 未完待续\u0026hellip;\u0026hellip;\n","date":"2022-10-16T15:16:01+08:00","image":"http://localhost:8888/p/orb-slam3%E7%A8%A0%E5%AF%86%E5%BB%BA%E5%9B%BE/ORB-SLAM3-cover.webp","permalink":"http://localhost:8888/p/orb-slam3%E7%A8%A0%E5%AF%86%E5%BB%BA%E5%9B%BE/","title":"ORB SLAM3稠密建图"},{"content":"准备 在ORB_SLAM3\\Examples\\Monocular下新建myvideo.yaml和myvideo.cpp，视频文件也放到这。 在myvideo.yaml中添加内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 %YAML:1.0 #-------------------------------------------------------------------------------------------- # Camera Parameters. Adjust them! #-------------------------------------------------------------------------------------------- Camera.type: \u0026#34;PinHole\u0026#34; # Camera calibration and distortion parameters (OpenCV) Camera.fx: 614.3472290039062 Camera.fy: 613.3615112304688 Camera.cx: 314.36767578125 Camera.cy: 239.8182830810547 Camera.k1: 0.0 Camera.k2: 0.0 Camera.p1: 0.0 Camera.p2: 0.0 Camera.k3: 0.0 # Camera frames per second Camera.fps: 30.0 # Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale) Camera.RGB: 1 # Camera resolution Camera.width: 1920 Camera.height: 1080 #-------------------------------------------------------------------------------------------- # ORB Parameters #-------------------------------------------------------------------------------------------- # ORB Extractor: Number of features per image ORBextractor.nFeatures: 1000 # ORB Extractor: Scale factor between levels in the scale pyramid ORBextractor.scaleFactor: 1.2 # ORB Extractor: Number of levels in the scale pyramid\tORBextractor.nLevels: 8 # ORB Extractor: Fast threshold # Image is divided in a grid. At each cell FAST are extracted imposing a minimum response. # Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST # You can lower these values if your images have low contrast\tORBextractor.iniThFAST: 20 ORBextractor.minThFAST: 7 #-------------------------------------------------------------------------------------------- # Viewer Parameters #-------------------------------------------------------------------------------------------- Viewer.KeyFrameSize: 0.05 Viewer.KeyFrameLineWidth: 5 Viewer.GraphLineWidth: 0.9 Viewer.PointSize:2 Viewer.CameraSize: 0.08 Viewer.CameraLineWidth: 3 Viewer.ViewpointX: 0 Viewer.ViewpointY: -0.7 Viewer.ViewpointZ: -1.8 Viewer.ViewpointF: 500 在myvideo.cpp中添加内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // // Created by xiang on 11/29/17. // // 该文件将打开给定的视频文件，并将图像传递给ORB-SLAM2进行定位 // 需要opencv #include \u0026lt;opencv2/opencv.hpp\u0026gt; // ORB-SLAM的系统接口 #include \u0026#34;System.h\u0026#34; #include \u0026lt;string\u0026gt; #include \u0026lt;chrono\u0026gt; // for time stamp #include \u0026lt;iostream\u0026gt; using namespace std; // 参数文件与字典文件 // 如果你系统上的路径不同，请修改它 // 第二个路径建议用相对路径 string parameterFile = \u0026#34;./myvideo.yaml\u0026#34;; string vocFile = \u0026#34;../../Vocabulary/ORBvoc.txt\u0026#34;; // 视频文件，修改的话需要和你的视频名字一起改 string videoFile = \u0026#34;./video.mp4\u0026#34;; int main(int argc, char **argv) { // 声明 ORB-SLAM3 系统 ORB_SLAM3::System SLAM(vocFile, parameterFile, ORB_SLAM3::System::MONOCULAR, true); // 获取视频图像 cv::VideoCapture cap(videoFile); // change to 1 if you want to use USB camera. // 记录系统时间 auto start = chrono::system_clock::now(); while (1) { cv::Mat frame; cap \u0026gt;\u0026gt; frame; // 读取相机数据 if ( frame.data == nullptr ) break; // rescale because image is too large cv::Mat frame_resized; cv::resize(frame, frame_resized, cv::Size(640,480)); auto now = chrono::system_clock::now(); auto timestamp = chrono::duration_cast\u0026lt;chrono::milliseconds\u0026gt;(now - start); SLAM.TrackMonocular(frame_resized, double(timestamp.count())/1000.0); cv::waitKey(30); } SLAM.Shutdown(); return 0; } 修改ORB_SLAM3的CMakeLists.txt，在最后添加： 1 2 add_executable(myvideo Examples/Monocular/myvideo.cpp) target_link_libraries(myvideo ${PROJECT_NAME}) 运行 运行ORB_SLAM3\n1 2 3 cd ORB_SLAM3 chmod +x build.sh ./build.sh 不知道为什么myvideo文件生成在了ORB_SLAM3\\Examples_old\\Stereo-Inertial下，复制到ORB_SLAM3\\Examples\\Monocular下就行 之后再运行它：\n1 2 cp Examples_old/Stereo-Inertial/myvideo Examples/Monocular/myvideo ./myvideo 效果 参考文章： 用自己的视频跑ORB_SLAM3（密码：eu2t）\n","date":"2022-10-15T15:45:57+08:00","image":"http://localhost:8888/p/orb-slam3%E8%BF%90%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/ORB-SLAM3-cover.webp","permalink":"http://localhost:8888/p/orb-slam3%E8%BF%90%E8%A1%8C%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/","title":"ORB SLAM3运行自己的数据集"},{"content":"仓库链接 UZ-SLAMLab/ORB_SLAM3\n系统 我前面弄了Apollo所以想再整个新系统来弄SLAM，也可以直接在原系统中进行。\n在wsl2-distro-manager的release中下载最新版的压缩包。 打开就可以复制已有的WSL。 依赖 Pangolin Pangolin-Github\n1 2 3 4 5 6 7 8 9 10 git clone https://github.com/stevenlovegrove/Pangolin cd Pangolin/scripts/ rm -rf vcpkg/ git clone https://github.com/microsoft/vcpkg cd .. ./scripts/install_prerequisites.sh --dry-run recommended mkdir build \u0026amp;\u0026amp; cd build cmake .. cmake --build . sudo make install OpenCV opencv.org\n安装依赖 1 2 3 sudo apt install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev sudo apt install libgtk2.0-dev sudo apt install pkg-config 安装OpenCV 1 2 3 4 5 6 7 8 sudo apt update \u0026amp;\u0026amp; sudo apt install g++ unzip wget cmake wget -O opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.4.0.zip unzip opencv.zip cd opencv-4.4.0/ mkdir build \u0026amp;\u0026amp; cd build cmake .. cmake --build . sudo make install 安装好依赖的话在5.3中应该就不会报错\nEigen3 eigen.tuxfamily.org\n1 2 3 4 5 6 wget https://gitlab.com/libeigen/eigen/-/archive/3.1.1/eigen-3.1.1.zip unzip eigen-3.1.1.zip \u0026amp;\u0026amp; cd eigen-3.1.1 mkdir build \u0026amp;\u0026amp; cd build cmake .. sudo make install sudo cp -r /usr/local/include/eigen3/Eigen /usr/local/include 不知道为什么这个不用cmake --build .\n安装 Clone the repository:\n1 git clone https://github.com/UZ-SLAMLab/ORB_SLAM3.git ORB_SLAM3 1 2 3 cd ORB_SLAM3 chmod +x build.sh ./build.sh 报错1\n1 2 /home/trrrrw/orb-slam3/ORB_SLAM3/Thirdparty/DBoW2/DBoW2/BowVector.h:17:10: fatal error: boost/serialization/serialization.hpp: No such file or directory #include \u0026lt;boost/serialization/serialization.hpp\u0026gt; 1 sudo apt install libboost-dev 报错2\n1 2 /home/trrrrw/orb-slam3/ORB_SLAM3/src/System.cc:26:10: fatal error: openssl/md5.h: No such file or directory #include \u0026lt;openssl/md5.h\u0026gt; 1 sudo apt install libssl-dev 报错3\n1 /usr/bin/ld: cannot find -lboost_serialization 安装boost\n1 sudo apt install libboost-all-dev 测试数据集 下载数据集 https://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets#downloads 下载ASL格式 放在最外面新建文件夹 Examples 解压出mav0文件夹 在ORB_SLAM3下新建文件夹dataset/MH01，将mav0文件夹放在这 1 2 3 4 mkdir dataset \u0026amp;\u0026amp; cd dataset mkdir MH01 \u0026amp;\u0026amp; cd MH01 ## 把mav0文件夹复制到MH01里就行 cp -r ../../../Examples/mav0/ ./ 运行 1 2 cd ../../Examples ./Monocular/mono_euroc ../Vocabulary/ORBvoc.txt ./Monocular/EuRoC.yaml ../dataset/MH01 ./Monocular/EuRoC_TimeStamps/MH01.txt 这样应该是没有窗口的 在 Examples/Monocular/mono_euroc.cc 第 83 行附近，将函数的最后一个参数更改为 true ORB_SLAM3::System SLAM(argv[1],argv[2],ORB_SLAM3::System::MONOCULAR, true); 默认情况下为 false，改为true 用WSL这样还是没有窗口🤷‍♂️\nWSL2 安装xfce4 1 sudo apt install xfce4 重新编译会报错（如果2.2.1没安装依赖的话） 1 what(): OpenCV(4.4.0) /home/trrrrw/orb-slam3/opencv-4.4.0/modules/highgui/src/window.cpp:634: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function \u0026#39;cvNamedWindow\u0026#39; 删除OpenCV后安装libgtk2.0-dev and pkg-config后重新编译安装 1 2 cd opencv-4.4.0/build sudo make uninstall 安装依赖 1 2 3 sudo apt install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev sudo apt install libgtk2.0-dev sudo apt install pkg-config 编译安装 1 2 3 4 cd build cmake .. cmake --build . sudo make install 再执行4.4 成功👍 ","date":"2022-10-06T21:09:26+08:00","image":"http://localhost:8888/p/%E5%9C%A8wsl2%E4%B8%AD%E8%BF%90%E8%A1%8Corb-slam3/ORB-SLAM3-cover.webp","permalink":"http://localhost:8888/p/%E5%9C%A8wsl2%E4%B8%AD%E8%BF%90%E8%A1%8Corb-slam3/","title":"在WSL2中运行ORB SLAM3"},{"content":"Node.js 介绍 百度百科 菜鸟教程 下载 官网\n安装 CSDN\n只需要完成第一步即可，第二步修改全局模块路径和缓存路径可以不做，npm包一般不会很大。\nGit 下载 官网\n使用 安装完成后右键菜单会有这个 常用命令 cd \u0026quot;路径\u0026quot; 打开路径\ngit clone 链接 克隆仓库，链接为仓库链接。克隆下来的位置是上面那个命令打开的路径。\n新建GitHub仓库 https://github.com/new 填写仓库名blog，其他默认。\n安装Hexo 1 npm install -g hexo-cli 如果之后打开项目后不能用hexo命令可以再重新安装hexo\n新建站点 1 2 3 hexo init \u0026lt;folder\u0026gt; cd \u0026lt;folder\u0026gt; npm install 要把\u0026lt;folder\u0026gt;改为自己的文件夹名，\u0026lt;\u0026gt;也要去掉\n新建完成后指定文件夹的目录：\n1 2 3 4 5 6 7 8 . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes _config.yml中的一些参数\n参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 keywords 网站的关键词。支持多个关键词。 author 您的名字 language 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。 timezone 网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。 更多详细说明移步官方文档 ⭐最主要的是url和root，如果不自定义域名的话，url为https://\u0026lt;username\u0026gt;.github.io/\u0026lt;repositories\u0026gt;/，root为/\u0026lt;repositories\u0026gt;/。如果设置不正确的话可能会导致网页没有css样式。 参数名后的冒号后面要有一个空格 安装主题 一般主题都会有使用教程，这里只展示了使用主题文件安装的过程。\n从主题站找到自己喜欢的主题，点击标题进入对应GitHub仓库下载 将主题文件放到一个单独文件夹\u0026lt;ThemeFolder\u0026gt;，并将改文件夹放在themes文件夹里 在站点的_config.yml文件中theme的内容更改为\u0026lt;ThemeFolder\u0026gt;即可 一个主题可能会有以下的结构： 1 2 3 4 5 6 . ├── _config.yml ├── languages ├── layout ├── scripts └── source _config.yml 主题的配置文件。和 Hexo 配置文件不是同一个文件，要注意区分。\n如需更换主题，只需要将新主题的文件夹放到正确位置，再将站点的_config.yml文件中theme的内容更改为新的主题名即可\n生成静态文件 1 hexo g #hexo generate的缩写 网页需要的文件都在public文件夹下，将该文件夹下文件上传到GitHub仓库即可。\n启动服务 1 hexo s #hexo server的缩写 用这个可以先在本地预览你的网页\n如果不能用的话先安装，--save是把npm包安装在这个项目中并记录在package.json中\n1 npm install hexo-server --save 新建文章 1 hexo new [layout] \u0026lt;title\u0026gt; 同样[]和\u0026lt;\u0026gt;也要去掉\n布局（Layout） 路径 描述 post source/_posts 文章 page source 页面 draft source/_drafts 草稿 部署到GitHub 打开网站的_config.yml 在文件底部找到以下内容并补全：\n1 2 3 4 deploy: type: git repo: https://github.com/Trrrrw/blog # 你的仓库链接 branch: main 然后在blog文件夹中打开终端输入命令npm install hexo-deployer-git --save安装部署插件。 之后输入命令：\n1 2 3 hexo clean #清除已生成的静态文件 hexo g #hexo generate 生成静态文件 hexo d #hexo deploy 生成静态文件并部署到仓库 如果在部署的时候出现 Failed to connect to github.com port之类的错误，在终端中执行git config --global --unset http.proxy和git config --global --unset https.proxy应该就行了。 完成之后要去GitHub仓库里找到Settings -\u0026gt; Pages -\u0026gt; Build and deployment -\u0026gt; Branch，设置成main分支，路径为/(root)。点save保存之后就能在https://username.github.io/repo/ 里看到你的网页。\n自定义域名 购买域名 例：example.com\n域名解析 在电脑上执行 1 ping username.github.io 得到\n1 2 正在 Ping username.github.io [IP地址] 具有 32 字节的数据: ... 记住上面的IP地址\n在购买的域名控制台找到域名列表-域名解析 添加解析 主机记录 记录类型 解析路线 记录值 TTL @ AAAA 默认 IPV6地址 10 分钟 @ A 默认 IPV4地址 10 分钟 @ CNAME 默认 username.github.io 10 分钟 www CNAME 默认 username.github.io 10 分钟 前两个行用有一个即可，但好像都没什么用。还会和第三行冲突。 可以只有后面两行，第四行的www可以换成自己喜欢的、符合规范的前缀，可以设成blog来说明这个网站是一个blog网站。也可以只有第三行，这样就是一个裸域名比较好记忆。 如果修改了的话下面两项设置要把www改成对应的前缀或者删除。\n绑定GitHub Page 在GitHub仓库中点击Settings-\u0026gt;Pages 在Custom domain下填写www.example.com 点Save保存 等待GitHub检查完DNS勾选下面的Enforce HTTPS 修改Hexo的_config.yml 在Hexo的_config.yml中修改url和root\n1 2 url: https://www.example.com root: / 再重新部署一次即可\n参考文章： 官方文档 Markdown教程\n","date":"2022-07-04T22:24:42+08:00","image":"http://localhost:8888/p/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BAblog%E7%BD%91%E7%AB%99/Hexo-cover.webp","permalink":"http://localhost:8888/p/%E5%9F%BA%E4%BA%8Ehexo%E6%90%AD%E5%BB%BAblog%E7%BD%91%E7%AB%99/","title":"基于Hexo搭建blog网站"}]